{
    "files.associations": {
        "*.mdx": "markdown"
    },
    "[markdown]": {
        "files.trimTrailingWhitespace": false
    },
    "editor.tokenColorCustomizations": {
        "comments": "#999",
        "[Nord]": {
            "comments": "#7e839b"
        }
    },
    "javascript.preferences.quoteStyle": "single",
    "typescript.preferences.quoteStyle": "single",
    "workbench.colorCustomizations": {
        "[Nord]": {
            // "editor.background": "#201f28",
            "editor.wordHighlightBackground": "#267b9d88",
            "editor.wordHighlightBorder": "#267b9d88",
            // "editor.wordHighlightBackground": "#1F89B488",
            // "editor.wordHighlightBorder": "#1F89B488",
            "editor.wordHighlightStrongBackground": "#229F5788",
            "editor.wordHighlightStrongBorder": "#229F5788",
            "editor.selectionHighlightBackground": "#1F89B488"
            // "editor.selectionHighlightBackground": "#1d5476",
            // "editor.selectionHighlightBackground": "#197dbb",
            // "editor.findMatchBackground": "#FFF8",
            // "editor.findMatchBorder": "#FFF8",
            // "editor.findMatchBackground": "#1F89B488",
            // "editor.findMatchBackground": "#ffd97077",
            // "editor.findMatchHighlightBackground": "#3e6379",
            // "tab.inactiveForeground": "#8AF",
            // "tab.hoverForeground": "#FFF",
            // "tab.activeForeground": "#8AF",
            // "gitDecoration.modifiedResourceForeground": "#808A90"
        },
        "[1337]": {
            "sideBar.background": "#232229",
            "sideBarSectionHeader.background": "#303040",
            "editorGroupHeader.tabsBackground": "#191e29",
            "tab.activeBackground": "#303040",
            "tab.inactiveBackground": "#191e29",
            // "tab.activeBackground": "#252533",
            "editor.background": "#151a25",
            // "editor.background": "#191e29",
            // "editor.background": "#191919",
            // "editor.background": "#232328",
            // "editor.background": "#242432",
            // "editor.background": "#292934",
            "editor.lineHighlightBackground": "#20384D",
            // "editor.lineHighlightBackground": "#456",
            // "editor.lineHighlightBackground": "#30485D",
            // "editor.lineHighlightBorder": "#30485D",
            // "editorOverviewRuler.wordHighlightForeground": "#1a1a09",
            // "editorOverviewRuler.wordHighlightStrongForeground": "#1a1a09",
            "editor.wordHighlightBackground": "#1F89B488",
            "editor.wordHighlightBorder": "#1F89B488",
            "editor.wordHighlightStrongBackground": "#229F5788",
            "editor.wordHighlightStrongBorder": "#229F5788",
            "editor.selectionHighlightBackground": "#197dbb",
            // "editor.selectionHighlightBackground": "#75754b",
            "editor.findMatchBackground": "#ffd97077",
            "editor.findMatchHighlightBackground": "#197dbb"
            // "activityBar.background": "#3574ca",
            // "activityBar.activeBorder": "#f2ccdc",
            // "activityBar.foreground": "#15202b",
            // "activityBar.inactiveForeground": "#15202b99",
            // "activityBarBadge.background": "#f2ccdc",
            // "activityBarBadge.foreground": "#15202b",
            // "statusBar.background": "#3574ca",
            // "statusBarItem.hoverBackground": "#5d90d5",
            // "statusBar.foreground": "#e7e7e7"
        }
    },
    "workbench.editor.enablePreview": true,
    "workbench.editor.decorations.badges": false,
    "workbench.editor.decorations.colors": false,
    "editor.mouseWheelScrollSensitivity": 3,
    "editor.fastScrollSensitivity": 3.5,
    "editor.stablePeek": false,
    // "editor.fontWeight": "300",
    // "editor.fontFamily": "JetBrains Mono",
    // "editor.fontFamily": "JetBrains Mono Extralight",
    // "editor.fontFamily": "Alegreya",
    // "editor.fontFamily": "Cochin",
    "editor.fontFamily": "JetBrains Mono Light",
    // "editor.fontFamily": "JetBrains Mono Medium",
    // "editor.fontFamily": "Fira Code",
    // "editor.fontFamily": "Recursive Sans",
    // "editor.fontFamily": "Input",
    // "editor.lineHeight": 22,
    "editor.lineHeight": 23,
    "editor.fontLigatures": true,
    // none, gutter, line, all
    "editor.renderLineHighlight": "all",
    "workbench.startupEditor": "none",
    "emmet.includeLanguages": {
        "twig": "html"
    },
    "macros": {
        "duplicateLineAndToggleComment": [
            "editor.action.copyLinesDownAction",
            "editor.action.commentLine",
            "cursorUp"
        ],
        "deleteLineLeft": [
            "cursorHomeSelect",
            "deleteRight"
        ],
        "deleteLineRight": [
            "cursorEndSelect",
            "deleteRight"
        ],
        "deleteLineAll": [
            "cursorHomeSelect",
            "deleteRight",
            "cursorEndSelect",
            "deleteLeft"
        ],
        "deleteUntilEolCharacter": [
            "cursorEndSelect",
            "cursorLeftSelect",
            "deleteRight"
        ],
        "deleteStartOfLineCharacter": [
            "cursorHome",
            "deleteRight"
        ],
        "deleteStartOfLineWord": [
            "cursorHome",
            "cursorWordRightSelect",
            "deleteLeft",
            "deleteRight"
        ],
        "deleteEolCharacter": [
            "cursorEnd",
            "deleteLeft"
        ],
        "eolSemicolon": [
            "cursorEnd",
            {
                "command": "type",
                "args": {
                    "text": ";"
                }
            }
        ],
        "eolColon": [
            "cursorEnd",
            {
                "command": "type",
                "args": {
                    "text": ":"
                }
            }
        ],
        "eolComma": [
            "cursorEnd",
            {
                "command": "type",
                "args": {
                    "text": ","
                }
            }
        ],
        "eolPeriod": [
            "cursorEnd",
            {
                "command": "type",
                "args": {
                    "text": "."
                }
            }
        ],
        "eolBrackets": [
            "cursorEnd",
            {
                "command": "type",
                "args": {
                    "text": " {\n"
                }
            }
        ],
        "eolHtmlClosingBracket": [
            "cursorEnd",
            {
                "command": "type",
                "args": {
                    "text": ">"
                }
            }
        ],
        "selectToBracketAtEndOfLine": [
            "cursorEnd",
            "editor.action.selectToBracket"
            // { "command": "editor.action.selectToBracketAtEndOfLine" }
        ],
        "goToThirdToLastCharacter": [
            "cursorEnd",
            "cursorLeft",
            "cursorLeft"
        ],
        "goToPenultimateCharacter": [
            "cursorEnd",
            "cursorLeft"
        ],
        "goToTwoCharactersFromEnd": [
            "cursorEnd",
            "cursorLeft",
            "cursorLeft"
        ],
        "insertConsoleLog": [
            {
                "command": "type",
                "args": {
                    "text": "console.log();"
                }
            },
            "cursorLeft",
            "cursorLeft"
        ],
        "insertFormatterIgnoreDeno": [
            "editor.action.insertLineBefore",
            {
                "command": "type",
                "args": {
                    "text": "// deno-fmt-ignore"
                }
            },
            "cursorDown",
            "cursorEnd"
        ],
        "insertFormatterIgnorePrettier": [
            "editor.action.insertLineBefore",
            {
                "command": "type",
                "args": {
                    "text": "// prettier-ignore"
                }
            },
            "cursorDown",
            "cursorEnd"
        ],
        "insertClassAttribute": [
            {
                "command": "type",
                "args": {
                    "text": " class=\"\""
                }
            },
            "cursorLeft"
        ],
        "insertClassNameAttribute": [
            {
                "command": "type",
                "args": {
                    "text": " className=\"\""
                }
            },
            "cursorLeft"
        ],
        "insertClassAttributeWithSingleQuotes": [
            {
                "command": "type",
                "args": {
                    "text": " class=''"
                }
            },
            "cursorLeft"
        ],
        "insertPaddingSpaces": [
            {
                "command": "type",
                "args": {
                    "text": "  "
                }
            },
            "cursorLeft"
        ],
        "insertForEach": [
            // Copy the word under the cursor
            "cursorWordStartLeft",
            "cursorWordStartRightSelect",
            "editor.action.clipboardCopyAction",
            "cursorLeft",
            // Insert some text
            {
                "command": "type",
                "args": {
                    "text": "forEach("
                }
            },
            "cursorWordStartRight",
            // Insert more text
            {
                "command": "type",
                "args": {
                    "text": " => );"
                }
            },
            "cursorLeft",
            "cursorLeft"
            // "editor.action.clipboardPasteAction"
        ],
        "insertSetTimout": [
            {
                "command": "type",
                "args": {
                    "text": "setTimeout(() => {\n"
                }
            },
            "cursorDown",
            "cursorLeft",
            {
                "command": "type",
                "args": {
                    "text": ", 1000"
                }
            },
            "cursorEnd",
            {
                "command": "type",
                "args": {
                    "text": ";"
                }
            },
            "cursorUp"
        ],
        "insertEqualsWithQuotes": [
            "cursorEnd",
            {
                "command": "type",
                "args": {
                    "text": "=\"\""
                }
            },
            "cursorLeft"
        ],
        "insertFatArrow": [
            {
                "command": "type",
                "args": {
                    "text": " => "
                }
            }
        ],
        "eolInsertFatArrow": [
            "cursorEnd",
            {
                "command": "type",
                "args": {
                    "text": " => "
                }
            }
        ],
        "insertImportStatement": [
            {
                "command": "type",
                "args": {
                    "text": "import {  } from '';"
                }
            },
            "cursorLeft",
            "cursorLeft",
            "cursorLeft",
            "cursorLeft",
            "cursorLeft",
            "cursorLeft",
            "cursorLeft",
            "cursorLeft",
            "cursorLeft",
            "cursorLeft",
            "cursorLeft"
        ],
        "insertReturnStatement": [
            {
                "command": "type",
                "args": {
                    "text": "return "
                }
            }
        ],
        "insertLambdaFunction": [
            {
                "command": "type",
                "args": {
                    "text": "() => "
                }
            }
        ],
        "insertMappingText": [
            {
                "command": "type",
                "args": {
                    "text": " => {"
                }
            },
            "cursorRight",
            "cursorRight",
            {
                "command": "type",
                "args": {
                    "text": ";"
                }
            },
            "cursorLeft",
            "cursorLeft",
            "cursorLeft",
            {
                "command": "type",
                "args": {
                    "text": "\n"
                }
            }
        ],
        "insertThisAtStart": [
            "cursorHome",
            {
                "command": "type",
                "args": {
                    "text": "this."
                }
            }
        ],
        "insertMethodParens": [
            "cursorEnd",
            {
                "command": "type",
                "args": {
                    "text": "();"
                }
            }
        ],
        "insertThisAndMethodParens": [
            "cursorHome",
            {
                "command": "type",
                "args": {
                    "text": "this."
                }
            },
            "cursorEnd",
            {
                "command": "type",
                "args": {
                    "text": "();"
                }
            }
        ],
        "insertTsLintMaxLineLength": [
            "editor.action.insertLineBefore",
            "editor.action.commentLine",
            {
                "command": "type",
                "args": {
                    "text": "tslint:disable-next-line:max-line-length"
                }
            }
        ],
        "insertDenoTest": [
            {
                "command": "type",
                "args": {
                    "text": "Deno.test('', () => {"
                }
            },
            "cursorEnd",
            {
                "command": "type",
                "args": {
                    "text": ";"
                }
            },
            "cursorLeft",
            "cursorLeft",
            "cursorLeft",
            {
                "command": "type",
                "args": {
                    "text": "\n"
                }
            },
            {
                "command": "editor.action.deleteLines"
            },
            "cursorUp",
            "cursorRight",
            "cursorRight",
            "cursorRight",
            "cursorRight",
            "cursorRight",
            "cursorRight",
            "cursorRight",
            "cursorRight"
        ],
        "insertDenoTestAsync": [
            {
                "command": "type",
                "args": {
                    "text": "Deno.test('', async () => {"
                }
            },
            "cursorEnd",
            {
                "command": "type",
                "args": {
                    "text": ";"
                }
            },
            "cursorLeft",
            "cursorLeft",
            "cursorLeft",
            {
                "command": "type",
                "args": {
                    "text": "\n"
                }
            },
            {
                "command": "editor.action.deleteLines"
            },
            "cursorUp",
            "cursorRight",
            "cursorRight",
            "cursorRight",
            "cursorRight",
            "cursorRight",
            "cursorRight",
            "cursorRight",
            "cursorRight",
        ],
        "insertDenoTestStepAsync": [
            {
                "command": "type",
                "args": {
                    "text": "await test.step('', async () => {"
                }
            },
            "cursorEnd",
            {
                "command": "type",
                "args": {
                    "text": ";"
                }
            },
            "cursorLeft",
            "cursorLeft",
            "cursorLeft",
            {
                "command": "type",
                "args": {
                    "text": "\n"
                }
            },
            {
                "command": "editor.action.deleteLines"
            },
            "cursorUp",
            "cursorRight",
            "cursorRight",
            "cursorRight",
            "cursorRight",
            "cursorRight",
            "cursorRight",
            "cursorRight",
            "cursorRight",
            "cursorRight",
            "cursorRight",
            "cursorRight",
            "cursorRight",
            "cursorRight",
            "cursorRight"
        ],
        "insertDescribeBlock": [
            {
                "command": "type",
                "args": {
                    "text": "describe('', () => {"
                }
            },
            "cursorEnd",
            {
                "command": "type",
                "args": {
                    "text": ";"
                }
            },
            "cursorLeft",
            "cursorLeft",
            "cursorLeft",
            {
                "command": "type",
                "args": {
                    "text": "\n"
                }
            },
            {
                "command": "editor.action.deleteLines"
            },
            "cursorUp",
            "cursorRight",
            "cursorRight",
            "cursorRight",
            "cursorRight",
            "cursorRight",
            "cursorRight",
            "cursorRight"
        ],
        "insertItTest": [
            {
                "command": "type",
                "args": {
                    "text": "it('', () => {"
                }
            },
            "cursorEnd",
            {
                "command": "type",
                "args": {
                    "text": ";"
                }
            },
            "cursorLeft",
            "cursorLeft",
            "cursorLeft",
            {
                "command": "type",
                "args": {
                    "text": "\n"
                }
            },
            {
                "command": "editor.action.deleteLines"
            },
            "cursorUp",
            "cursorRight"
        ],
        "insertJasmineTestWithAsync": [
            {
                "command": "type",
                "args": {
                    "text": "it('', async() => {"
                }
            },
            "cursorEnd",
            {
                "command": "type",
                "args": {
                    "text": ";"
                }
            },
            "cursorLeft",
            "cursorLeft",
            "cursorLeft",
            {
                "command": "type",
                "args": {
                    "text": "\n"
                }
            },
            {
                "command": "editor.action.deleteLines"
            },
            "cursorUp",
            "cursorRight"
        ],
        "insertJasmineTestWithFakeAsync": [
            {
                "command": "type",
                "args": {
                    "text": "it('', fakeAsync(() => {"
                }
            },
            "cursorEnd",
            {
                "command": "type",
                "args": {
                    "text": ";"
                }
            },
            "cursorLeft",
            "cursorLeft",
            "cursorLeft",
            "cursorLeft",
            {
                "command": "type",
                "args": {
                    "text": "\n"
                }
            },
            {
                "command": "editor.action.deleteLines"
            },
            "cursorUp"
        ],
        "insertJasmineTestForService": [
            // Copy the word under the cursor (the name of the service)
            "cursorWordStartLeft",
            "cursorWordStartRightSelect",
            "editor.action.clipboardCopyAction",
            // Insert the spec
            {
                "command": "type",
                "args": {
                    "text": "it('', inject([NEWSERVICE], (service: NEWSERVICE) => {"
                }
            },
            "cursorEnd",
            {
                "command": "type",
                "args": {
                    "text": ";"
                }
            },
            "cursorLeft",
            "cursorLeft",
            "cursorLeft",
            "cursorLeft",
            {
                "command": "type",
                "args": {
                    "text": "\n"
                }
            },
            {
                "command": "editor.action.deleteLines"
            },
            "cursorUp"
            // Navigate to the first occurrence of NEWSERVICE
            /*/
            "cursorRight",
            "cursorRight",
            "cursorRight",
            "cursorRight",
            "cursorRight",
            "cursorRight",
            "cursorRight",
            "cursorRight",
            "cursorRight",
            "cursorRight",
            "cursorRight",
            // Replace it with the new service name
            "cursorWordStartRightSelect",
            "editor.action.clipboardPasteAction",
            // Navigate to the second occurrence of NEWSERVICE
            "cursorEnd",
            "cursorLeft",
            "cursorLeft",
            "cursorLeft",
            "cursorLeft",
            "cursorLeft",
            "cursorLeft",
            "cursorLeft",
            // Replace it with the new service name
            "cursorWordStartLeft",
            "cursorWordStartRightSelect",
            "editor.action.clipboardPasteAction",
            // Position the cursor within the spec description quotes
            "cursorHome",
            "cursorRight",
            "cursorRight",
            "cursorRight",
            "cursorRight"
            /*/
        ],
        "insertExpectCall": [
            {
                "command": "type",
                "args": {
                    "text": "expect()"
                }
            },
            "cursorLeft"
        ],
        "insertComponentFormGetCall": [
            {
                "command": "type",
                "args": {
                    "text": "component.form.get('')"
                }
            },
            "cursorLeft",
            "cursorLeft"
        ],
        "insertLoopGroovy": [
            "cursorEnd",
            {
                "command": "type",
                "args": {
                    "text": ".each { ->\n"
                }
            },
            "cursorUp",
            "cursorEnd",
            "cursorLeft",
            "cursorLeft",
            "cursorLeft"
        ],
        "insertPeriodDelayed": [
            "cursorRight",
            "cursorRight",
            {
                "command": "type",
                "args": {
                    "text": "."
                }
            }
        ],
        "insertRepeatableBlockComment": [
            "editor.action.insertLineBefore",
            {
                "command": "type",
                "args": {
                    "text": "/*/"
                }
            },
            "cursorDown",
            "editor.action.insertLineAfter",
            {
                "command": "type",
                "args": {
                    "text": "/*/"
                }
            },
            "cursorUp",
            "cursorHome",
            {
                "command": "type",
                "args": {
                    "text": "    "
                }
            }
        ],
        "insertRegionTag": [
            "editor.action.insertLineBefore",
            {
                "command": "type",
                "args": {
                    "text": "//#region "
                }
            }
        ],
        "insertEndRegionTag": [
            "editor.action.insertLineAfter",
            {
                "command": "type",
                "args": {
                    "text": "//#endregion"
                }
            }
        ],
        "insertNgRxActionProps": [
            {
                "command": "type",
                "args": {
                    "text": ", props<{  }>()"
                }
            },
            "cursorLeft",
            "cursorLeft",
            "cursorLeft",
            "cursorLeft",
            "cursorLeft"
        ],
        "insertNgRxActionSimple": [
            {
                "command": "type",
                "args": {
                    "text": "export const ACTION_NAME = createAction(`${Actor.SYSTEM} DESCRIPTION`);"
                }
            },
            "cursorHome",
            "cursorWordRight",
            "cursorWordRight",
            "cursorWordRight",
            "cursorWordStartLeftSelect"
        ],
        "insertNgRxActionComplex": [
            {
                "command": "type",
                "args": {
                    "text": "export const ACTION_NAME = createAction(`${Actor.SYSTEM} DESCRIPTION`, props<{ PROP: TYPE }>());"
                }
            },
            "cursorHome",
            "cursorWordRight",
            "cursorWordRight",
            "cursorWordRight",
            "cursorWordStartLeftSelect"
        ],
        "insertNgRxEffectSimple": [
            {
                "command": "type",
                "args": {
                    "text": "public EFFECT_NAME = createEffect(() => this.actionStream.pipe(\nofType(actions.ACTION),\nfilter(action => action.PROP),\nmap(action => actions.NEW_ACTION)"
                }
            },
            "cursorDown",
            {
                "command": "type",
                "args": {
                    "text": ";"
                }
            },
            "cursorUp",
            "cursorUp",
            "cursorUp",
            "cursorUp",
            "cursorWordRight",
            "cursorWordRight",
            "cursorWordStartLeftSelect"
        ],
        "insertNgRxEffectComplex": [
            {
                "command": "type",
                "args": {
                    "text": "public EFFECT_NAME = createEffect(() => this.actionStream.pipe(\nofType(actions.ACTION),\nwithLatestFrom(this.store.select(selectors.SELECTOR)),\nfilter(([action, DATA]) => DATA),\nmap(([action, DATA]) => actions.NEW_ACTION)));"
                }
            },
            "cursorDown",
            {
                "command": "type",
                "args": {
                    "text": ";"
                }
            },
            "cursorUp",
            "cursorUp",
            "cursorUp",
            "cursorUp",
            "cursorUp",
            "cursorWordRight",
            "cursorWordRight",
            "cursorWordStartLeftSelect"
        ],
        "insertCreateAttribute": [
            {
                "command": "type",
                "args": {
                    "text": "{{ create_attribute({'class': ''}) }}"
                }
            },
            "cursorLeft",
            "cursorLeft",
            "cursorLeft",
            "cursorLeft",
            "cursorLeft",
            "cursorLeft"
        ],
        "insertTwigCodeSnippet": [
            {
                "command": "type",
                "args": {
                    "text": "{%  "
                }
            },
            "cursorLeft"
        ],
        "insertTwigInterpolationSnippet": [
            {
                "command": "type",
                "args": {
                    "text": "{{  }}"
                }
            },
            "cursorLeft",
            "cursorLeft",
            "cursorLeft"
        ],
        "newLineAbove": [
            "editor.action.insertLineBefore",
            "cursorDown",
            "cursorEnd"
        ],
        "newLineBelow": [
            "editor.action.insertLineAfter",
            "cursorUp",
            "cursorEnd"
        ],
        "wrapWordInQuotes": [
            "cursorWordStartLeft",
            {
                "command": "type",
                "args": {
                    "text": "'"
                }
            },
            "cursorWordStartRight",
            {
                "command": "type",
                "args": {
                    "text": "'"
                }
            }
        ],
        "wrapWordInDoubleQuotes": [
            "cursorWordStartLeft",
            {
                "command": "type",
                "args": {
                    "text": "\""
                }
            },
            "cursorWordStartRight",
            {
                "command": "type",
                "args": {
                    "text": "\""
                }
            }
        ],
        "wrapWordInPromiseType": [
            "cursorWordLeft",
            {
                "command": "type",
                "args": {
                    "text": "Promise<"
                }
            },
            "cursorWordRight",
            {
                "command": "type",
                "args": {
                    "text": ">"
                }
            }
        ],
        "insertMarkdownCheckbox": [
            {
                "command": "type",
                "args": {
                    "text": "- [ ] "
                }
            }
        ],
        "insertAstroComment": [
            "editor.action.insertLineBefore",
            {
                "command": "type",
                "args": {
                    "text": "{/* "
                }
            },
            {
                "command": "type",
                "args": {
                    "text": " */}"
                }
            },
            "cursorLeft",
            "cursorLeft",
            "cursorLeft",
            "cursorLeft"
        ],
        "insertAstroPropsAssignment": [
            {
                "command": "type",
                "args": {
                    "text": "const {  } = Astro.props;"
                }
            },
            "cursorHome",
            "cursorWordRight",
            "cursorWordRight",
            "cursorRight"
        ],
        "insertCommentOnNewLine": [
            "editor.action.insertLineBefore",
            "editor.action.commentLine"
        ],
        "insertCommentToDoOnNewLine": [
            "editor.action.insertLineBefore",
            "editor.action.commentLine",
            {
                "command": "type",
                "args": {
                    "text": "TODO: "
                }
            }
        ],
        "insertCommentToDoImplementOnNewLine": [
            "editor.action.insertLineAfter",
            "editor.action.commentLine",
            {
                "command": "type",
                "args": {
                    "text": "TODO: Implement"
                }
            }
        ],
        "selectWord": [
            "cursorWordStartLeft",
            "cursorWordStartRightSelect",
            "editor.action.clipboardCopyAction",
            "cursorRight"
        ],
        "replaceWord": [
            "cursorWordStartLeft",
            "cursorWordRightSelect",
            "editor.action.clipboardPasteAction"
        ],
        "deleteWord": [
            "cursorWordStartLeft",
            "cursorWordRightSelect",
            "deleteLeft"
        ],
        "deleteWordAtStartOfLine": [
            "cursorHome",
            "cursorWordRightSelect",
            "deleteLeft"
        ]
    },
    "[html]": {
        "editor.defaultFormatter": "denoland.vscode-deno"
    },
    "[log]": {},
    "git.enableSmartCommit": true,
    "extensions.ignoreRecommendations": false,
    "typescript.check.npmIsInstalled": false,
    "telemetry.telemetryLevel": "off",
    "editor.renderControlCharacters": false,
    "editor.renderWhitespace": "none",
    "typescript.updateImportsOnFileMove.enabled": "always",
    "editor.cursorSmoothCaretAnimation": "on",
    "editor.cursorBlinking": "solid",
    "editor.cursorStyle": "line",
    "editor.cursorWidth": 1,
    "files.exclude": {
        "**/.classpath": true,
        "**/.project": true,
        "**/.settings": true,
        "**/.factorypath": true
    },
    "editor.acceptSuggestionOnEnter": "off",
    "editor.snippetSuggestions": "none",
    "update.mode": "manual",
    "explorer.autoReveal": false,
    "diffEditor.renderIndicators": false,
    "workbench.tree.indent": 20,
    "workbench.tree.renderIndentGuides": "none",
    "workbench.iconTheme": null,
    "files.autoSave": "onFocusChange",
    "editor.wordBasedSuggestions": "off",
    "javascript.preferences.importModuleSpecifier": "relative",
    "editor.minimap.size": "fit",
    "javascript.updateImportsOnFileMove.enabled": "always",
    "explorer.confirmDragAndDrop": false,
    "typescript.preferences.importModuleSpecifier": "relative",
    "editor.acceptSuggestionOnCommitCharacter": false,
    "editor.suggestSelection": "first",
    "files.trimTrailingWhitespace": true,
    "files.insertFinalNewline": true,
    "files.trimFinalNewlines": true,
    "explorer.confirmDelete": false,
    "diffEditor.renderSideBySide": false,
    "terminal.integrated.fontFamily": "JetBrains Mono Light",
    "workbench.editorAssociations": {
        "*.html": "default",
        "*.svg": "default"
    },
    "typescript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": false,
    "editor.suggest.showTypeParameters": false,
    "breadcrumbs.showTypeParameters": false,
    "outline.showTypeParameters": false,
    "editor.find.cursorMoveOnType": false,
    "spellright.language": [
        "en"
    ],
    "spellright.documentTypes": [
        "latex",
        "plaintext"
    ],
    "scm.diffDecorationsGutterVisibility": "hover",
    "diffEditor.maxFileSize": 3,
    "workbench.sideBar.location": "right",
    "workbench.layoutControl.enabled": false,
    "window.commandCenter": false,
    "workbench.editor.empty.hint": "hidden",
    "tailwind-fold.supportedLanguages": [
        "html",
        "typescriptreact",
        "javascriptreact",
        "typescript",
        "javascript",
        "vue-html",
        "vue",
        "php",
        "markdown",
        "coffeescript",
        "svelte",
        "astro",
        "twig"
    ],
    "tailwind-fold.showTailwindImage": false,
    "tailwind-fold.unfoldIfLineSelected": false,
    "tailwind-fold.autoFold": false,
    "workbench.activityBar.location": "hidden",
    "editor.codeActionWidget.includeNearbyQuickFixes": true,
    "svg.preview.mode": "svg",
    "svg.preview.backgroundCustom": "#E1CECE",
    "diffEditor.experimental.showMoves": true,
    "editor.minimap.enabled": false,
    "terminal.integrated.defaultProfile.osx": "zsh",
    "git.openRepositoryInParentFolders": "always",
    "workbench.editor.tabActionCloseVisibility": false,
    "editor.stickyScroll.enabled": false,
    "php.debug.executablePath": "/usr/local/Cellar/php/8.3.6/bin/php",
    "editor.guides.indentation": false,
    "workbench.colorTheme": "Nord",
    "editor.colorDecorators": false,
    "diffEditor.ignoreTrimWhitespace": true,
    "editor.unicodeHighlight.ambiguousCharacters": true,
    "editor.pasteAs.preferences": [
        "text.updateImports.jsts"
    ],
    "terminal.integrated.fontLigatures": true,
    "workbench.statusBar.visible": false,
    "breadcrumbs.enabled": false
}
