// Key bindings in this file overwrite the defaults
[

    // Debugger -------------------------------------------------------------------------
    { "key": "f9",                   "command": "workbench.action.debug.continue",
                                        "when": "inDebugMode" },
    { "key": "shift+f9",             "command": "workbench.action.debug.restart",
                                        "when": "inDebugMode" },
    { "key": "f5",                   "command": "workbench.action.debug.start",
                                        "when": "!inDebugMode" },
    { "key": "shift+f2",             "command": "workbench.action.debug.stop",
                                        "when": "inDebugMode" },
    { "key": "f7",                   "command": "workbench.action.debug.stepInto",
                                        "when": "inDebugMode" },
    { "key": "shift+f7",             "command": "workbench.action.debug.stepOut",
                                        "when": "inDebugMode" },
    { "key": "f8",                   "command": "workbench.action.debug.stepOver",
                                        "when": "inDebugMode" },
    { "key": "alt+numpad0",          "command": "editor.debug.action.toggleBreakpoint",
                                        "when": "editorTextFocus" },
    { "key": "shift+alt+0",          "command": "editor.debug.action.toggleColumnBreakpoint",
                                        "when": "editorTextFocus" },

    // Editor -------------------------------------------------------------------------
    { "key": "shift+alt+a",          "command": "workbench.action.toggleCenteredLayout" },
    { "key": "ctrl+k ctrl+e",        "command": "workbench.action.closeOtherEditors" },
    { "key": "ctrl+k ctrl+w",        "command": "workbench.action.closeAllEditors" },
    { "key": "shift+alt+w",          "command": "workbench.action.toggleSidebarPosition" },
    { "key": "alt+b",                "command": "workbench.action.toggleSidebarVisibility" },
    { "key": "shift+alt+e",          "command": "workbench.view.explorer" },
    { "key": "ctrl+alt+c",           "command": "workbench.files.action.collapseExplorerFolders" },
    { "key": "shift+alt+d",          "command": "workbench.view.debug" },
    { "key": "shift+alt+g",          "command": "workbench.view.scm" },
    { "key": "alt+,",                "command": "workbench.action.openGlobalSettings" },
    { "key": "ctrl+alt+n",           "command": "workbench.action.newWindow" },
    { "key": "shift+f10",            "command": "workbench.action.debug.stepOut" },
    { "key": "shift+f11",            "command": "workbench.action.toggleZenMode" },
    { "key": "ctrl+l",               "command": "workbench.action.togglePanel" },
    { "key": "alt+n",                "command": "workbench.action.splitEditor" },
    { "key": "ctrl+j",               "command": "editor.action.joinLines" },
    { "key": "shift+alt+r",          "command": "editor.action.reindentlines" },
    { "key": "shift+alt+=",          "command": "editor.action.toggleMinimap" },
    { "key": "ctrl+shift+alt+s",     "command": "workbench.action.toggleStatusbarVisibility" },
    { "key": "shift+alt+-",          "command": "breadcrumbs.toggle" },
    { "key": "shift+alt+]",          "command": "editor.action.selectToBracket",
                                        "when": "editorTextFocus" },
    { "key": "alt+-",                "command": "breadcrumbs.focus",
                                        "when": "breadcrumbsPossible" },

    { "key": "alt+'",                "command": "cursorEnd",
                                        "when": "textInputFocus" },

    { "key": "alt+`",                "command": "workbench.action.terminal.toggleTerminal" },
    { "key": "shift+alt+`",          "command": "workbench.debug.action.toggleRepl" },
    { "key": "alt+1",                "command": "workbench.action.terminal.focusNext",
                                        "when": "terminalFocus" },

    { "key": "ctrl+shift+l",         "command": "editor.action.insertCursorAtEndOfEachLineSelected",
                                        "when": "editorTextFocus" },

    { "key": "shift+alt+z",          "command": "editor.action.transformToLowercase",
                                        "when": "editorFocus" },

    { "key": "shift+alt+x",          "command": "editor.action.transformToUppercase",
                                        "when": "editorFocus" },

    { "key": "shift+alt+i",          "command": "editor.action.selectHighlights",
                                        "when": "editorFocus" },
    /*/
    { "key": "shift+alt+2",          "command": "merge-conflict.previous",
                                        "when": "editorTextFocus" },
    { "key": "shift+alt+3",          "command": "merge-conflict.next",
                                        "when": "editorTextFocus" },
    { "key": "shift+alt+w",          "command": "merge-conflict.accept.current",
                                        "when": "editorTextFocus" },
    { "key": "shift+alt+d",          "command": "merge-conflict.accept.incoming",
                                        "when": "editorTextFocus" },
    { "key": "ctrl+shift+alt+a",     "command": "merge-conflict.accept.all-current",
                                        "when": "editorTextFocus" },
    { "key": "ctrl+shift+alt+s",     "command": "merge-conflict.accept.all-incoming",
                                        "when": "editorTextFocus" },
    /*/
    { "key": "alt+g",                 "command": "editor.action.deleteLines",
                                         "when": "textInputFocus && !editorReadonly" },

    { "key": "shift+alt+right",       "command": "cursorWordPartRight",
                                         "when": "textInputFocus" },

    { "key": "shift+alt+left",        "command": "cursorWordPartStartLeft",
                                         "when": "textInputFocus" },

    { "key": "shift+alt+backspace",  "command": "deleteWordPartLeft",
                                        "when": "textInputFocus && !editorReadonly" },

    { "key": "alt+delete",           "command": "macros.deleteStartOfLineCharacter",
                                        "when": "textInputFocus && !editorReadonly" },

    { "key": "shift+alt+delete",     "command": "deleteWordPartRight",
                                        "when": "textInputFocus && !editorReadonly" },

    { "key": "ctrl+shift+alt+delete", "command": "macros.deleteWordAtStartOfLine",
                                        "when": "textInputFocus && !editorReadonly" },

    { "key": "alt+q",                "command": "toggleFindCaseSensitive",
                                        "when": "editorFocus" },

    { "key": "alt+.",                "command": "editor.action.quickFix",
                                        "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly" },

    { "key": "shift+enter",          "command": "editor.action.insertLineAfter",
                                        "when": "editorTextFocus && !editorReadonly" },

    { "key": "ctrl+q",                "command": "editor.action.deleteLines",
                                        "when": "textInputFocus && !editorReadonly" },

    { "key": "alt+s",                "command": "workbench.files.action.showActiveFileInExplorer" },

    { "key": "alt+backspace",        "command": "macros.deleteEolCharacter",
                                        "when": "editorTextFocus" },

    { "key": "ctrl+shift+backspace", "command": "macros.deleteLineLeft",
                                        "when": "editorTextFocus" },

    { "key": "ctrl+shift+alt+backspace", "command": "macros.deleteLineAll",
                                             "when": "editorTextFocus" },

    { "key": "ctrl+shift+delete",    "command": "deleteAllRight",
                                        "when": "editorTextFocus" },

    { "key": "shift+alt+up",         "command": "cursorColumnSelectUp",
                                        "when": "editorTextFocus" },

    { "key": "shift+alt+down",       "command": "cursorColumnSelectDown",
                                        "when": "editorTextFocus" },

    { "key": "shift+alt+f",          "command": "macros.insertForEach",
                                            "when": "editorTextFocus && !editorReadonly" },

    { "key": "ctrl+shift+up",        "command": "editor.action.moveLinesUpAction",
                                        "when": "editorTextFocus && !editorReadonly" },

    { "key": "ctrl+shift+down",      "command": "editor.action.moveLinesDownAction",
                                        "when": "editorTextFocus && !editorReadonly" },

    { "key": "ctrl+shift+d",         "command": "editor.action.copyLinesDownAction",
                                        "when": "editorTextFocus && !editorReadonly" },

    { "key": "shift+alt+m",          "command": "editor.action.rename",
                                        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly" },

    // Macros -------------------------------------------------------------------------

    { "key": "ctrl+shift+alt+]",     "command": "macros.selectToBracketAtEndOfLine",
                                        "when": "editorTextFocus" },

    { "key": "shift+alt+c",          "command": "macros.insertConsoleLog",
                                        "when": "editorTextFocus" },

    { "key": "ctrl+alt+space",       "command": "macros.insertPaddingSpaces",
                                        "when": "editorTextFocus" },

    { "key": "alt+t",                "command": "macros.insertSetTimout",
                                        "when": "editorTextFocus" },

    { "key": "alt+i",                "command": "macros.insertImportStatement",
                                        "when": "editorTextFocus" },

    { "key": "shift+alt+'",          "command": "macros.goToThirdToLastCharacter",
                                        "when": "editorTextFocus" },

    { "key": "ctrl+alt+d",           "command": "macros.insertJasmineDescribeBlock",
                                        "when": "editorTextFocus" },

    { "key": "ctrl+alt+j",           "command": "macros.insertJasmineTest",
                                        "when": "editorTextFocus" },

    { "key": "ctrl+shift+j",         "command": "macros.insertJasmineTestWithAsync",
                                            "when": "editorTextFocus" },

    { "key": "ctrl+shift+alt+j",     "command": "macros.insertJasmineTestWithFakeAsync",
                                        "when": "editorTextFocus" },

    { "key": "shift+alt+j",          "command": "macros.insertJasmineTestForService",
                                        "when": "editorTextFocus" },

    { "key": "alt+m",                "command": "macros.insertThisAtStart",
                                        "when": "editorTextFocus" },

    { "key": "alt+m",                "command": "macros.insertMethodParens",
                                        "when": "editorTextFocus" },

    { "key": "shift+alt+m",          "command": "macros.insertThisAndMethodParens",
                                        "when": "editorTextFocus" },

    { "key": "ctrl+alt+m",           "command": "macros.insertTsLintMaxLineLength",
                                        "when": "editorTextFocus" },

    { "key": "ctrl+alt+.",           "command": "macros.insertPeriodDelayed",
                                        "when": "editorTextFocus" },

    { "key": "ctrl+alt+e",           "command": "macros.insertExpectCall",
                                        "when": "editorTextFocus" },

    { "key": "ctrl+shift+m",         "command": "macros.insertComponentFormGetCall",
                                        "when": "editorTextFocus" },

    { "key": "ctrl+shift+'",         "command": "macros.insertEqualsWithQuotes",
                                        "when": "editorTextFocus" },

    { "key": "shift+alt+p",         "command": "macros.insertNgRxActionProps",
                                            "when": "editorTextFocus" },

    { "key": "ctrl+shift+a",         "command": "macros.insertNgRxActionSimple",
                                            "when": "editorTextFocus" },

    { "key": "ctrl+shift+alt+a",     "command": "macros.insertNgRxActionComplex",
                                            "when": "editorTextFocus" },

    { "key": "ctrl+shift+e",         "command": "macros.insertNgRxEffectSimple",
                                        "when": "editorTextFocus" },

    { "key": "ctrl+shift+alt+e",     "command": "macros.insertNgRxEffectComplex",
                                        "when": "editorTextFocus" },

    { "key": "ctrl+shift+alt+d",    "command": "macros.duplicateLineAndToggleComment",
                                        "when": "editorTextFocus" },

    { "key": "ctrl+'",              "command": "macros.eolSemicolon",
                                        "when": "editorTextFocus" },

    { "key": "ctrl+;",              "command": "macros.eolColon",
                                        "when": "editorTextFocus" },

    { "key": "ctrl+,",              "command": "macros.eolComma",
                                        "when": "editorTextFocus" },

    { "key": "ctrl+.",              "command": "macros.eolPeriod",
                                       "when": "editorTextFocus" },

    { "key": "shift+alt+[",         "command": "macros.eolBrackets",
                                       "when": "editorTextFocus" },

    { "key": "ctrl+shift+.",        "command": "macros.eolHtmlClosingBracket",
                                       "when": "editorTextFocus" },

    { "key": "ctrl+shift+.",        "command": "macros.eolHtmlClosingBracket",
                                       "when": "editorTextFocus" },

    { "key": "alt+=",               "command": "macros.eolInsertFatArrow",
                                       "when": "editorTextFocus" },

    { "key": "ctrl+shift+=",        "command": "macros.insertLambdaFunction",
                                       "when": "editorTextFocus" },

    { "key": "shift+alt+l",         "command": "macros.insertLoopGroovy",
                                       "when": "editorTextFocus" },

    { "key": "alt+/",               "command": "macros.insertRepeatableBlockComment",
                                       "when": "editorTextFocus" },

    { "key": "ctrl+shift+i",        "command": "macros.newLineAbove",
                                       "when": "editorTextFocus" },

    { "key": "ctrl+shift+n",        "command": "macros.newLineBelow",
                                       "when": "editorTextFocus" },

    { "key": "ctrl+alt+'",          "command": "macros.wrapWordInQuotes",
                                       "when": "editorTextFocus" },

    { "key": "ctrl+shift+alt+'",    "command": "macros.wrapWordInDoubleQuotes",
                                       "when": "editorTextFocus" },

    { "key": "ctrl+alt+/",          "command": "macros.insertCommentOnNewLine",
                                       "when": "editorTextFocus" },

    { "key": "ctrl+shift+alt+/",    "command": "macros.insertCommentToDoOnNewLine",
                                       "when": "editorTextFocus" },

    { "key": "ctrl+shift+alt+i",    "command": "macros.insertCommentToDoImplementOnNewLine",
                                       "when": "editorTextFocus" },

    { "key": "alt+c",                "command": "macros.selectWord",
                                        "when": "editorTextFocus" },

    { "key": "alt+d",                "command": "macros.replaceWord",
                                        "when": "editorTextFocus" },

    { "key": "ctrl+\\",              "command": "macros.deleteWord",
                                        "when": "editorTextFocus" },

    { "key": "alt+n",                "command": "macros.insertRegionTag",
                                        "when": "editorTextFocus" },

    { "key": "shift+alt+n",          "command": "macros.insertEndRegionTag",
                                        "when": "editorTextFocus" }
    ]
